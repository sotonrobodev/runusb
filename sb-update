#!/usr/bin/env python3

import argparse
import os
import subprocess
from glob import glob
import shutil

UPDATE_FILENAME = 'update.tar.xz'
UPDATE_DIR = '/updating'
SB_DEBS = '/sb-debs'


def argument_parser():
    parser = argparse.ArgumentParser(
        description="Automatically run from mountpoints with .autorun",
    )

    parser.add_argument(
        'path',
        help="path to usb drive",
        action='store',
    )
    return parser


def rebuild_apt_repo():
    working_dir = os.getcwd()
    os.chdir(SB_DEBS)
    with open('Packages', 'wb') as packages:
        subprocess.check_call(['dpkg-scanpackages', '.', '/dev/null'], stdout=packages)
    subprocess.check_call(['xz', '-f', '-3', 'Packages'])
    os.chdir(working_dir)


def update_and_upgrade():
    subprocess.check_call(['apt', 'update', '-y'])
    subprocess.check_call(['apt', 'upgrade', '-y'])

def main():
    options = argument_parser().parse_args()
    update_file = os.path.join(options.path, UPDATE_FILENAME)
    os.mkdir(UPDATE_DIR)
    subprocess.check_call(['tar', 'xJf', update_file, '-C', UPDATE_DIR])
    deb_glob = glob("{}/*.deb".format(UPDATE_DIR))
    if len(deb_glob) == 0:
        raise FileNotFoundError("Can't find deb files in {}, exiting".format(UPDATE_DIR))
    for deb in deb_glob:
        check_deb = subprocess.call(['dpkg', '--info', deb])
        if check_deb != 0:
            raise ValueError("file {} is not a deb file!".format(deb))
        shutil.copy(deb, SB_DEBS)
    rebuild_apt_repo()
    update_and_upgrade()
    subprocess.check_call(["shutdown", "now"])
    exit()


if __name__ == '__main__':
    main()
