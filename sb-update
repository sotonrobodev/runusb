#!/usr/bin/env python3

import argparse
import os
import subprocess
from glob import glob
import shutil
import logging

UPDATE_FILENAME = 'update.tar.xz'
UPDATE_DIR = '/updating'
SB_DEBS = '/sb-debs'
LOG_FILE = 'update.log'


def argument_parser():
    parser = argparse.ArgumentParser(
        description="Automatically run from mountpoints with .autorun",
    )

    parser.add_argument(
        'path',
        help="path to usb drive",
        action='store',
    )
    return parser


def rebuild_apt_repo():
    logging.debug("Rebuilding apt repo")
    working_dir = os.getcwd()
    os.chdir(SB_DEBS)
    with open('Packages', 'wb') as packages:
        subprocess.check_call(['dpkg-scanpackages', '.', '/dev/null'], stdout=packages)
    subprocess.check_call(['xz', '-f', '-3', 'Packages'])
    os.chdir(working_dir)


def update_and_upgrade():
    logging.debug("Updating Repos")
    subprocess.check_call(['apt', 'update', '-y'], stdout=subprocess.DEVNULL)
    logging.debug(subprocess.check_output(['apt', 'list', '--upgradable']))

    logging.debug("Performing update")
    subprocess.check_call(['apt', 'upgrade', '-y'], stdout=subprocess.DEVNULL)


def validate_deb(deb_path):
    """
    Validate that the given path is indeed a debian package.

    Raises ``ValueError`` if the package is not valid.
    """
    check_deb = subprocess.call(
        ['dpkg', '--info', deb_path],
        stdout=subprocess.DEVNULL,
    )

    if check_deb != 0:
        raise ValueError("file {} is not a deb file!".format(deb_path))



def main():
    options = argument_parser().parse_args()
    logging.basicConfig(
        level=logging.DEBUG,
        handlers=[
            logging.FileHandler(os.path.join(options.path, LOG_FILE)),
            logging.StreamHandler()
        ]
    )
    update_file = os.path.join(options.path, UPDATE_FILENAME)

    logging.info("Starting updates from {}".format(update_file))
    os.mkdir(UPDATE_DIR)
    subprocess.check_call(['tar', 'xJf', update_file, '-C', UPDATE_DIR])
    os.remove(update_file)
    deb_glob = glob("{}/*.deb".format(UPDATE_DIR))
    if len(deb_glob) == 0:
        raise FileNotFoundError("Can't find deb files in {}, exiting".format(UPDATE_DIR))

    logging.debug("Found {} potential packages".format(len(deb_glob)))
    for deb in deb_glob:
        logging.debug("Adding {} to internal repo".format(os.path.basename(deb)))
        shutil.copy(deb, SB_DEBS)

    rebuild_apt_repo()
    update_and_upgrade()

    logging.info("Upgrade complete, cleaning up.")
    shutil.rmtree(UPDATE_DIR)

    logging.info("Rebooting.")
    subprocess.check_call(["reboot"])


if __name__ == '__main__':
    main()
